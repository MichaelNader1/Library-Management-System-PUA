// <auto-generated />
using System;
using LibraryManagementSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagementSystem.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20250427120345_ss")]
    partial class ss
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AdminUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User_Id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("LibraryID")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BookLanguage", b =>
                {
                    b.Property<int>("LanguagesLanguage_Id")
                        .HasColumnType("int");

                    b.Property<int>("booksBookID")
                        .HasColumnType("int");

                    b.HasKey("LanguagesLanguage_Id", "booksBookID");

                    b.HasIndex("booksBookID");

                    b.ToTable("BookLanguage", (string)null);
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.Property<int>("BooksBookID")
                        .HasColumnType("int");

                    b.Property<int>("PublishersPublisher_ID")
                        .HasColumnType("int");

                    b.HasKey("BooksBookID", "PublishersPublisher_ID");

                    b.HasIndex("PublishersPublisher_ID");

                    b.ToTable("Book_Publishers", (string)null);
                });

            modelBuilder.Entity("BookSubheading", b =>
                {
                    b.Property<int>("BookSubheadingsSubheading_Id")
                        .HasColumnType("int");

                    b.Property<int>("booksBookID")
                        .HasColumnType("int");

                    b.HasKey("BookSubheadingsSubheading_Id", "booksBookID");

                    b.HasIndex("booksBookID");

                    b.ToTable("Book_Subheadings", (string)null);
                });

            modelBuilder.Entity("Borrowing", b =>
                {
                    b.Property<int>("Borrowing_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Borrowing_Id"), 1L, 1);

                    b.Property<DateTime>("Actual_Return_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_Of_Borrowing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<int>("LibraryBookID")
                        .HasColumnType("int")
                        .HasColumnName("LibraryBook_ID");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("Return_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Borrowing_Id");

                    b.HasIndex("LibraryBookID");

                    b.HasIndex("User_Id");

                    b.ToTable("Borrowing");
                });

            modelBuilder.Entity("Copying", b =>
                {
                    b.Property<int>("Copying_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Copying_Id"), 1L, 1);

                    b.Property<DateTime>("End_Time")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<int>("LibraryBookID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start_Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Copying_Id");

                    b.HasIndex("LibraryBookID");

                    b.HasIndex("User_Id");

                    b.ToTable("Copying");
                });

            modelBuilder.Entity("LibraryBook", b =>
                {
                    b.Property<int>("LibraryBookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryBookID"), 1L, 1);

                    b.Property<int>("Available_Copies")
                        .HasColumnType("int");

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("LibraryID")
                        .HasColumnType("int");

                    b.Property<int>("Total_Copies")
                        .HasColumnType("int");

                    b.HasKey("LibraryBookID");

                    b.HasIndex("LibraryID");

                    b.ToTable("LibraryBook");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Author", b =>
                {
                    b.Property<int>("Author_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Author_ID"), 1L, 1);

                    b.Property<string>("Author_Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Author_NickName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Author_ID");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Banned_User", b =>
                {
                    b.Property<int>("Ban_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ban_Id"), 1L, 1);

                    b.Property<DateTime>("Ban_End_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Ban_Start_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Ban_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("BannedUser");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"), 1L, 1);

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Author_Id")
                        .HasColumnType("int");

                    b.Property<int>("Category_Id")
                        .HasColumnType("int");

                    b.Property<string>("Classification_Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Donor_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<bool>("IsDamage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMissing")
                        .HasColumnType("bit");

                    b.Property<string>("Locator")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Place_of_publication")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("Publish_Year")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Reciving_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Supply_Method_Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BookID");

                    b.HasIndex("Author_Id");

                    b.HasIndex("Category_Id");

                    b.HasIndex("Supply_Method_Id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Book_College", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("Book_ID")
                        .HasColumnType("int");

                    b.Property<int>("College_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookID");

                    b.HasIndex("Book_ID");

                    b.HasIndex("College_ID");

                    b.ToTable("Book_College");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.BookLibraryBook", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("LibraryBookID")
                        .HasColumnType("int");

                    b.HasKey("BookID", "LibraryBookID");

                    b.HasIndex("LibraryBookID");

                    b.ToTable("BookLibraryBook");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Category", b =>
                {
                    b.Property<int>("Category_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Category_Id"), 1L, 1);

                    b.Property<string>("Category_Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Category_Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.College", b =>
                {
                    b.Property<int>("College_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("College_ID"), 1L, 1);

                    b.Property<string>("College_Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("College_ID");

                    b.ToTable("College");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Curriculum", b =>
                {
                    b.Property<int>("Curriculum_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Curriculum_ID"), 1L, 1);

                    b.Property<string>("Curriculum_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Department_ID")
                        .HasColumnType("int");

                    b.HasKey("Curriculum_ID");

                    b.HasIndex("Department_ID");

                    b.ToTable("Curriculum");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Department", b =>
                {
                    b.Property<int>("Department_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Department_ID"), 1L, 1);

                    b.Property<int>("College_ID")
                        .HasColumnType("int");

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Department_ID");

                    b.HasIndex("College_ID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Discarding", b =>
                {
                    b.Property<int>("Discarding_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Discarding_ID"), 1L, 1);

                    b.Property<DateTime>("Discarding_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Discarding_Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LibraryBookID")
                        .HasColumnType("int");

                    b.HasKey("Discarding_ID");

                    b.HasIndex("LibraryBookID")
                        .IsUnique();

                    b.ToTable("Discarding");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Language", b =>
                {
                    b.Property<int>("Language_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Language_Id"), 1L, 1);

                    b.Property<string>("Language_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Language_Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Library", b =>
                {
                    b.Property<int>("LibraryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LibraryID");

                    b.ToTable("Library");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Penalty", b =>
                {
                    b.Property<int>("Penalty_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Penalty_Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Borrowing_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Penalty_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Penalty_Id");

                    b.HasIndex("Borrowing_Id")
                        .IsUnique();

                    b.ToTable("Penalties");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.PowerCampusUser", b =>
                {
                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_Id");

                    b.ToView("vw_PowerCampusUser");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Publisher", b =>
                {
                    b.Property<int>("Publisher_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Publisher_ID"), 1L, 1);

                    b.Property<string>("Publisher_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Publisher_ID");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Subheading", b =>
                {
                    b.Property<int>("Subheading_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Subheading_Id"), 1L, 1);

                    b.Property<string>("Subheading_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Subheading_Id");

                    b.ToTable("Subheadings");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Supply_Method", b =>
                {
                    b.Property<int>("Supply_Method_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Supply_Method_Id"), 1L, 1);

                    b.Property<string>("Supply_Method_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Supply_Method_Id");

                    b.ToTable("SupplyMethods");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Transferring", b =>
                {
                    b.Property<int>("Transferring_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Transferring_ID"), 1L, 1);

                    b.Property<int>("DestinationLibraryBookID")
                        .HasColumnType("int");

                    b.Property<int>("SourceLibraryBookID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Transferring_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Transferring_ID");

                    b.HasIndex("DestinationLibraryBookID");

                    b.HasIndex("SourceLibraryBookID");

                    b.ToTable("Transferring");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Visits", b =>
                {
                    b.Property<int>("Visit_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Visit_Id"), 1L, 1);

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Visit_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Visit_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Visit_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Reading", b =>
                {
                    b.Property<int>("Reading_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Reading_Id"), 1L, 1);

                    b.Property<DateTime>("End_Time")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int>("LibraryBookID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start_Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Reading_Id");

                    b.HasIndex("LibraryBookID");

                    b.HasIndex("User_Id");

                    b.ToTable("Readings");
                });

            modelBuilder.Entity("AdminUser", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.Library", "Library")
                        .WithMany("Users")
                        .HasForeignKey("LibraryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("BookLanguage", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesLanguage_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksBookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksBookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.Models.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersPublisher_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookSubheading", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.Subheading", null)
                        .WithMany()
                        .HasForeignKey("BookSubheadingsSubheading_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksBookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Borrowing", b =>
                {
                    b.HasOne("LibraryBook", "LibraryBook")
                        .WithMany("Borrowing")
                        .HasForeignKey("LibraryBookID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.Models.PowerCampusUser", "PowerCampusUser")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBook");

                    b.Navigation("PowerCampusUser");
                });

            modelBuilder.Entity("Copying", b =>
                {
                    b.HasOne("LibraryBook", "LibraryBook")
                        .WithMany("Copyings")
                        .HasForeignKey("LibraryBookID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.Models.PowerCampusUser", "PowerCampusUser")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBook");

                    b.Navigation("PowerCampusUser");
                });

            modelBuilder.Entity("LibraryBook", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Banned_User", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.PowerCampusUser", "PowerCampusUser")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PowerCampusUser");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Book", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("Author_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Category_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.Models.Supply_Method", "Supply_Method")
                        .WithMany()
                        .HasForeignKey("Supply_Method_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Supply_Method");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Book_College", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID");

                    b.HasOne("LibraryManagementSystem.Models.Book", null)
                        .WithMany("Book_Colleges")
                        .HasForeignKey("Book_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.Models.College", "College")
                        .WithMany("Book_Colleges")
                        .HasForeignKey("College_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("College");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.BookLibraryBook", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.Book", "Book")
                        .WithMany("BookLibraryBooks")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryBook", "LibraryBook")
                        .WithMany("BookLibraryBooks")
                        .HasForeignKey("LibraryBookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("LibraryBook");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Curriculum", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.Department", "Department")
                        .WithMany("Curriculums")
                        .HasForeignKey("Department_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Department", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.College", "College")
                        .WithMany("Departments")
                        .HasForeignKey("College_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("College");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Discarding", b =>
                {
                    b.HasOne("LibraryBook", "LibraryBook")
                        .WithOne("Discarding")
                        .HasForeignKey("LibraryManagementSystem.Models.Discarding", "LibraryBookID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LibraryBook");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Penalty", b =>
                {
                    b.HasOne("Borrowing", "Borrowing")
                        .WithOne("penalty")
                        .HasForeignKey("LibraryManagementSystem.Models.Penalty", "Borrowing_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrowing");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Transferring", b =>
                {
                    b.HasOne("LibraryBook", "DestinationLibraryBook")
                        .WithMany()
                        .HasForeignKey("DestinationLibraryBookID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryBook", "SourceLibraryBook")
                        .WithMany()
                        .HasForeignKey("SourceLibraryBookID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationLibraryBook");

                    b.Navigation("SourceLibraryBook");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Visits", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.PowerCampusUser", "PowerCampusUser")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PowerCampusUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AdminUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AdminUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdminUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AdminUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reading", b =>
                {
                    b.HasOne("LibraryBook", "LibraryBook")
                        .WithMany("Reading")
                        .HasForeignKey("LibraryBookID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.Models.PowerCampusUser", "PowerCampusUser")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBook");

                    b.Navigation("PowerCampusUser");
                });

            modelBuilder.Entity("Borrowing", b =>
                {
                    b.Navigation("penalty");
                });

            modelBuilder.Entity("LibraryBook", b =>
                {
                    b.Navigation("BookLibraryBooks");

                    b.Navigation("Borrowing");

                    b.Navigation("Copyings");

                    b.Navigation("Discarding");

                    b.Navigation("Reading");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Book", b =>
                {
                    b.Navigation("BookLibraryBooks");

                    b.Navigation("Book_Colleges");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.College", b =>
                {
                    b.Navigation("Book_Colleges");

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Department", b =>
                {
                    b.Navigation("Curriculums");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Library", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
